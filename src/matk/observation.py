class Observation():
    """ MATK observation class
    """
    def __init__(self, name, sim=None, weight=1.0, value=None, group=None):
        ''' Add observation to MATK object

            :param name: Observation name
            :type name: str
            :param sim: Simulated value
            :type sim: fl64
            :param weight: Observation weight
            :type weight: fl64
            :param value: Value of observation
            :type value: fl64
            :param group: Observation group or type (e.g., 'pressure', 'temperature')
            :type group: str
            :returns: Observation object
        '''
        self._name = name
        self._value = value
        self._sim = sim
        self._residual = None
        self._weight = weight
        self._group = group

    def __repr__(self):
        s = []
        s.append("'%s'" % self.name)
        if self._value is not None:
            sval = repr(self._value)
            sval = "observed=%s" % (sval)
            s.append(sval)
        if self._sim is not None:
            sval = repr(self._sim)
            sval = "simulated=%s" % (sval)
            s.append(sval)
        s.append("weight=%s" % (repr(self.weight)))
        return "<Observation %s>" % ', '.join(s)

    @property
    def name(self):
        '''Observation name'''
        return self._name

    @name.setter
    def name(self,value):
        self._name = value

    @property
    def value(self):
        '''Observation value'''
        return self._value

    @value.setter
    def value(self,value):
        self._value = value

    @property
    def weight(self):
        '''Weight to apply to simulated values'''
        return self._weight

    @weight.setter
    def weight(self,value):
        self._weight = value

    @property
    def group(self):
        '''Observation group name'''
        return self._group

    @group.setter
    def group(self,value):
        self._group = value

    @property
    def sim(self):
        '''Simulated value generated by MATK model'''
        return self._sim

    @sim.setter
    def sim(self,value):
        if value is not None:
            self._sim = value
        else:
            self._sim = None

    @property
    def residual(self):
        '''Observation value minus simulated value'''
        self._residual = (self._value - self._sim) * self._weight
        return self._residual

    @residual.setter
    def residual(self,value):
        self._residual = value
